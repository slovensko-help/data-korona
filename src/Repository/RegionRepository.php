<?php

declare(strict_types=1);

namespace App\Repository;

use App\Entity\Region;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\AbstractQuery;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @method Region|null find($id, $lockMode = null, $lockVersion = null)
 * @method Region|null findOneBy(array $criteria, array $orderBy = null)
 * @method Region[]    findAll()
 * @method Region[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class RegionRepository extends AbstractRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Region::class);
    }

    public function syncEntity(Region $region)
    {
//        $this->getEntityManager()->getClassMetadata(Region::class);
        $metadata = $this->getClassMetadata();
        //$id = $metadata->getIdentifierValues($region);

        $criteria = [];

        foreach ($metadata->fieldMappings as $field) {
            if (true === $field['unique']) {
                $criteria[] = "o.{$field['fieldName']} = :{$field['fieldName']}";
            }
        }

        $qb = $this->createQueryBuilder('o');

        dump($criteria);
        $qb->where(implode(' OR ', $criteria));

        $qb->setParameter('abbreviation', $region->getAbbreviation());
        $qb->setParameter('code', $region->getCode());

        $reg2 = $qb->getQuery()->getSingleResult(AbstractQuery::HYDRATE_SIMPLEOBJECT);

        dump($metadata->getFieldMapping('code'));
        $id = $metadata->getIdentifierValues($region);

        if (count($id) === 1) {
            $reg = $this->findOneBy($id);
        }
        dump($region, $reg2);die;
    }

    public function saveFromPartial(Region $region)
    {
        $metadata = $this->getClassMetadata();

        dump($metadata->getIdentifierFieldNames(), $metadata->getIdentifierValues($region));


//        $this->fin
    }

    public function save(array $item, ...$relatedEntities)
    {
        parent::save($item, $relatedEntities); // TODO: Change the autogenerated stub
    }
}
